// Code generated by protoc-gen-go.
// source: timeseries.proto
// DO NOT EDIT!

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	timeseries.proto

It has these top-level messages:
	Point
	PointError
	Query
	Tss
	Tsdata
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

type Point struct {
	Ksid      string  `protobuf:"bytes,1,opt,name=ksid" json:"ksid,omitempty"`
	Tsid      string  `protobuf:"bytes,2,opt,name=tsid" json:"tsid,omitempty"`
	Value     float32 `protobuf:"fixed32,3,opt,name=value" json:"value,omitempty"`
	Timestamp int64   `protobuf:"varint,4,opt,name=timestamp" json:"timestamp,omitempty"`
}

func (m *Point) Reset()                    { *m = Point{} }
func (m *Point) String() string            { return proto1.CompactTextString(m) }
func (*Point) ProtoMessage()               {}
func (*Point) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Point) GetKsid() string {
	if m != nil {
		return m.Ksid
	}
	return ""
}

func (m *Point) GetTsid() string {
	if m != nil {
		return m.Tsid
	}
	return ""
}

func (m *Point) GetValue() float32 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *Point) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

type PointError struct {
	Error string `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
}

func (m *PointError) Reset()                    { *m = PointError{} }
func (m *PointError) String() string            { return proto1.CompactTextString(m) }
func (*PointError) ProtoMessage()               {}
func (*PointError) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *PointError) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type Query struct {
	Ksid  string `protobuf:"bytes,1,opt,name=ksid" json:"ksid,omitempty"`
	Tsid  string `protobuf:"bytes,2,opt,name=tsid" json:"tsid,omitempty"`
	Start int64  `protobuf:"varint,3,opt,name=start" json:"start,omitempty"`
	End   int64  `protobuf:"varint,4,opt,name=end" json:"end,omitempty"`
}

func (m *Query) Reset()                    { *m = Query{} }
func (m *Query) String() string            { return proto1.CompactTextString(m) }
func (*Query) ProtoMessage()               {}
func (*Query) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Query) GetKsid() string {
	if m != nil {
		return m.Ksid
	}
	return ""
}

func (m *Query) GetTsid() string {
	if m != nil {
		return m.Tsid
	}
	return ""
}

func (m *Query) GetStart() int64 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *Query) GetEnd() int64 {
	if m != nil {
		return m.End
	}
	return 0
}

type Tss struct {
	Tss []*Tsdata `protobuf:"bytes,1,rep,name=tss" json:"tss,omitempty"`
}

func (m *Tss) Reset()                    { *m = Tss{} }
func (m *Tss) String() string            { return proto1.CompactTextString(m) }
func (*Tss) ProtoMessage()               {}
func (*Tss) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Tss) GetTss() []*Tsdata {
	if m != nil {
		return m.Tss
	}
	return nil
}

type Tsdata struct {
	Value     float32 `protobuf:"fixed32,1,opt,name=value" json:"value,omitempty"`
	Timestamp int64   `protobuf:"varint,2,opt,name=timestamp" json:"timestamp,omitempty"`
}

func (m *Tsdata) Reset()                    { *m = Tsdata{} }
func (m *Tsdata) String() string            { return proto1.CompactTextString(m) }
func (*Tsdata) ProtoMessage()               {}
func (*Tsdata) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Tsdata) GetValue() float32 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *Tsdata) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func init() {
	proto1.RegisterType((*Point)(nil), "proto.Point")
	proto1.RegisterType((*PointError)(nil), "proto.PointError")
	proto1.RegisterType((*Query)(nil), "proto.Query")
	proto1.RegisterType((*Tss)(nil), "proto.Tss")
	proto1.RegisterType((*Tsdata)(nil), "proto.Tsdata")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Timeseries service

type TimeseriesClient interface {
	SavePoint(ctx context.Context, in *Point, opts ...grpc.CallOption) (*PointError, error)
	GetTS(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Tss, error)
}

type timeseriesClient struct {
	cc *grpc.ClientConn
}

func NewTimeseriesClient(cc *grpc.ClientConn) TimeseriesClient {
	return &timeseriesClient{cc}
}

func (c *timeseriesClient) SavePoint(ctx context.Context, in *Point, opts ...grpc.CallOption) (*PointError, error) {
	out := new(PointError)
	err := grpc.Invoke(ctx, "/proto.Timeseries/SavePoint", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *timeseriesClient) GetTS(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Tss, error) {
	out := new(Tss)
	err := grpc.Invoke(ctx, "/proto.Timeseries/GetTS", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Timeseries service

type TimeseriesServer interface {
	SavePoint(context.Context, *Point) (*PointError, error)
	GetTS(context.Context, *Query) (*Tss, error)
}

func RegisterTimeseriesServer(s *grpc.Server, srv TimeseriesServer) {
	s.RegisterService(&_Timeseries_serviceDesc, srv)
}

func _Timeseries_SavePoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Point)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimeseriesServer).SavePoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Timeseries/SavePoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimeseriesServer).SavePoint(ctx, req.(*Point))
	}
	return interceptor(ctx, in, info, handler)
}

func _Timeseries_GetTS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Query)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimeseriesServer).GetTS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Timeseries/GetTS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimeseriesServer).GetTS(ctx, req.(*Query))
	}
	return interceptor(ctx, in, info, handler)
}

var _Timeseries_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Timeseries",
	HandlerType: (*TimeseriesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SavePoint",
			Handler:    _Timeseries_SavePoint_Handler,
		},
		{
			MethodName: "GetTS",
			Handler:    _Timeseries_GetTS_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "timeseries.proto",
}

func init() { proto1.RegisterFile("timeseries.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 261 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x90, 0x41, 0x4b, 0xc3, 0x40,
	0x10, 0x85, 0xbb, 0xd9, 0xa6, 0x90, 0x51, 0xa1, 0x2e, 0x1e, 0x42, 0x11, 0x0c, 0x2b, 0x48, 0x4e,
	0x39, 0xd4, 0xab, 0x57, 0xf1, 0xaa, 0xdb, 0x80, 0xe7, 0xd5, 0xcc, 0x21, 0x68, 0x9b, 0xb2, 0x33,
	0x2d, 0xf8, 0xef, 0x65, 0x67, 0x43, 0x2a, 0x82, 0x07, 0x4f, 0x79, 0xdf, 0x4b, 0xc8, 0x7b, 0xf3,
	0x60, 0xc9, 0xfd, 0x16, 0x09, 0x43, 0x8f, 0xd4, 0xec, 0xc3, 0xc0, 0x83, 0xc9, 0xe5, 0x61, 0xdf,
	0x21, 0x7f, 0x1e, 0xfa, 0x1d, 0x1b, 0x03, 0xf3, 0x0f, 0xea, 0xbb, 0x52, 0x55, 0xaa, 0x2e, 0x9c,
	0xe8, 0xe8, 0x71, 0xf4, 0xb2, 0xe4, 0x45, 0x6d, 0xae, 0x20, 0x3f, 0xfa, 0xcf, 0x03, 0x96, 0xba,
	0x52, 0x75, 0xe6, 0x12, 0x98, 0x6b, 0x28, 0x24, 0x81, 0xfd, 0x76, 0x5f, 0xce, 0x2b, 0x55, 0x6b,
	0x77, 0x32, 0xac, 0x05, 0x90, 0x90, 0xc7, 0x10, 0x86, 0x10, 0xff, 0x80, 0x51, 0x8c, 0x51, 0x09,
	0xec, 0x2b, 0xe4, 0x2f, 0x07, 0x0c, 0x5f, 0xff, 0x29, 0x42, 0xec, 0x03, 0x4b, 0x11, 0xed, 0x12,
	0x98, 0x25, 0x68, 0xdc, 0x75, 0x63, 0x85, 0x28, 0xed, 0x1d, 0xe8, 0x96, 0xc8, 0xdc, 0x80, 0x66,
	0xa2, 0x52, 0x55, 0xba, 0x3e, 0x5b, 0x5f, 0xa4, 0x11, 0x9a, 0x96, 0x3a, 0xcf, 0xde, 0xc5, 0x37,
	0xf6, 0x01, 0x16, 0x09, 0x4f, 0x27, 0xaa, 0x3f, 0x4f, 0xcc, 0x7e, 0x9d, 0xb8, 0xf6, 0x00, 0xed,
	0x34, 0xb1, 0x69, 0xa0, 0xd8, 0xf8, 0x23, 0xa6, 0x65, 0xcf, 0xc7, 0x30, 0xa1, 0xd5, 0xe5, 0x4f,
	0x92, 0x41, 0xec, 0xcc, 0xdc, 0x42, 0xfe, 0x84, 0xdc, 0x6e, 0xa6, 0x6f, 0x65, 0x8a, 0x15, 0x4c,
	0x35, 0xc9, 0xce, 0xde, 0x16, 0x02, 0xf7, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x25, 0xa8, 0x8f,
	0x0f, 0xcc, 0x01, 0x00, 0x00,
}
